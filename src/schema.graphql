type Query {
	users(query: String): [User!]!
	books(query: String): [Book!]!
	reviews(query: String): [Review!]!
}

type Mutation {
	createUser(data: CreateUserInput!): User!
	createBook(data: CreateBookInput!): Book!
	createReview(data: CreateReviewInput!): Review!
	deleteUser(id: ID!): User!
	deleteBook(id: ID!): Book!
	deleteReview(id: ID!): Review!
	updateUser(id: ID!, data: UpdateUserInput!): User!
	updateBook(id: ID!, data: UpdateBookInput!): Book!
	updateReview(id: ID!, data: UpdateReviewInput!): Review!
}

type Subscription {
	review(bookId: ID!): ReviewSubscriptionPayload!
	book: BookSubscriptionPayload!
}

input UpdateBookInput {
	title: String
	price: Float
	inStock: Boolean
	published: Boolean
}

input UpdateUserInput {
	name: String
	email: String
	location: String
	age: Int
}

input CreateUserInput {
	name: String!
	email: String!
	location: String
	age: Int
}

input CreateBookInput {
	title: String!
	price: Float!
	author: ID!
	published: Boolean!
	inStock: Boolean
}

input CreateReviewInput {
	text: String!
	author: ID!
	book: ID!
}

input UpdateReviewInput {
	text: String
}

type User {
	id: ID!
	name: String!
	email: String!
	location: String
	books: [Book!]!
	reviews: [Review!]!
	age: Int
	totalBooks: Int
}

type Book {
	id: ID!
	title: String!
	author: User!
	price: Float!
	published: Boolean!
	releaseYear: String
	rating: Float
	inStock: Boolean
	reviews: [Review!]!
}

type Review {
	id: ID!
	text: String!
	author: User!
	book: Book!
}

enum MutationType {
	CREATED
	UPDATED
	DELETED
}

type BookSubscriptionPayload {
	mutation: MutationType!
	data: Book!
}

type ReviewSubscriptionPayload {
	mutation: MutationType!
	data: Review!
}
